{"meta":{"title":"依夜の妙妙屋","subtitle":"Here is YiyeSss","description":"","author":"依夜","url":"http://yiyecreb.top","root":"/"},"pages":[{"title":"分类","date":"2023-05-24T08:17:10.000Z","updated":"2023-05-24T08:21:53.840Z","comments":true,"path":"categories/index.html","permalink":"http://yiyecreb.top/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2023-05-24T09:04:19.000Z","updated":"2023-06-17T07:40:00.983Z","comments":true,"path":"about/index.html","permalink":"http://yiyecreb.top/about/index.html","excerpt":"","text":"欢迎来到我的博客 My Friends , Welcome to my blog I hope you can have a happy day after reading this 语言 C Java H5,CSS3,JS VUE2 账号 网站 账号 昵称 Gitee YiyeSss 依夜 洛谷 YiyeSss YiyeSss"},{"title":"标签","date":"2023-05-24T08:19:20.000Z","updated":"2023-05-24T08:22:40.116Z","comments":true,"path":"tags/index.html","permalink":"http://yiyecreb.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"MySQL","slug":"MySql","date":"2023-07-17T16:00:00.000Z","updated":"2023-07-19T00:39:39.642Z","comments":true,"path":"2023/07/18/MySql/","link":"","permalink":"http://yiyecreb.top/2023/07/18/MySql/","excerpt":"","text":"MySQL表连接 全外连接:MySQL不支持,使用union来解决 union是MySQL中用来组合两个或多个select语句的结果集的一个操作符 基本语法: SELECT COLUMN_NAME(S) FROM TABLE1 UNION SELECT COLUMN_NAME(S) FROM TABLE2 使用规则: union内的每个select语句必须拥有相同数量的列，并且对应列也拥有兼容的数据类型 union会去掉重复行 如果不想去掉重复行：使用union all SQL DQL:数据查询语言:select DML:数据操作语言,insert,update,delete DDL:数据定义语言:create,alter,drop DCL:数据控制语言:grant,remoke TPL:事务控制语言,commit,rollback,savepoint DML插入语句语法: insert into 表名 (列名列表) values (对应值的列表) 列名列表可以省略，对应值输入的顺序与表的设计顺序一致，而且每列都要插入值 插入空值 列名列表中不写值为空的列 值设置为空(null) 一次插入多行记录 insert into 表名(列名列表) values (对应的列表),(对应的列表),(对应的列表)... insert into 表名(列名列表) 子查询; insert into emp_copy select * from emp where DEPTNO = 10; 快速创建表(DDL)create table 表名 as 子查询; create table emp_copy as select * from emp where 1 &lt;&gt; 1; 更新语句语法: update 表名 set 列名 = 值,列名 = 值,列名 = 值,列名 = 值,列名 = 值,列名 = 值... [where 条件]","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yiyecreb.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yiyecreb.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"Oracle","slug":"Oracle","date":"2023-06-16T16:00:00.000Z","updated":"2023-07-17T03:31:02.913Z","comments":true,"path":"2023/06/17/Oracle/","link":"","permalink":"http://yiyecreb.top/2023/06/17/Oracle/","excerpt":"","text":"Oracle数据库 存储在一起的数据集合 能为多个用户共享 尽可能小的数据冗余 与应用程序彼此独立 数据库管理系统(DBMS) 是一种管理数据库的软件 包括数据库的创建、使用、维护、配置 数据库命令都要通过数据库管理系统处理 关系型数据库 实体以及实体间的各种关系均用关系来表示 用户的角度来看关系就是一张由行和列组成的二维数据表 常见关系型数据库 Oracle 甲骨文 MySQL 甲骨文 SQL Server 微软 DB2 IBM Sybase sybase公司 Oracle数据库简介: 目前是世界上最流行的关系型数据库之一 支持各种操作系统(Windows、Linux、IOS) 数据库领域一直处于领先地位 特点: 可移植性好 使用方便，功能强 适合各种大中小型服务器和微机环境 样例表Dept(部门) deptno:部门编号 dname:部门名称 loc:部门地址 Emp(员工表) empno:员工编号 ename:员工姓名 job:工作岗位 mgr:经历编号 hiredate:入职日期 sal:薪水 comm:奖金 deptno:部门编号 SalGrade(薪水等级表) GRADE:等级编号 LOSAL:最低工资 HISAL:最高工资 结构化的查询语言(SQL) 是操作和检索关系型数据库的标准语言 二十世纪七十年代由IBM公司开发，目前应用于各种关系型数据库 分类: 数据查询语言(DQL):SELECT，从表中查询数据 数据操作语句(DML):INSERT,UPDATE,DELETE,用于添加修改删除数据 事务处理语言(TPL):COMMIT和ROLLBACK，用于提交和回滚事务 数据控制语言(DCL):GRANT和REVOKE,用于授权和收回授权 数据定义语言(DDL):CREATE,DROP,ALTER,用于定义销毁和修改数据库对象 基本SELECT语句 SELECT语句 SELECT子句(SELECT *:查询所有列) FROM子句(FROM DEPT:表示从哪张表查询数据) SQL的相关概念 关键字:SQL语言中的保留字符串 语句:一条完整的SQL语句(独立执行) 子句:部分SQL语句(不能独立执行) 书写规则: 不区分大小写 可以在一行书写也可以多行书写，建议多行书写 关键字不可以分开，缩写或跨行写 选择列 所有列:* SELECT * FROM EMP; 选择指定列:列名之间使用逗号分隔 SELECT ENAME,HIREDATE FROM EMP; 算术运算符 +,-,*,&#x2F;,() 例题: 1.员工转正后，月薪上调20%，请查询出所有员工转正后的月薪。2.员工试用期6个月，转正后月薪上调20%，请查询出所有员工工作第一年的年薪所得（不考虑奖金部分.年薪的试用期6个月的月薪+转正后6个月的月薪) SELECT Ename,SAL,SAL*6+SAL*1.2*6 AS 试用转正年薪,SAL*1.2 AS 转正月薪 FROM EMP; 空值 空值是一种无效的,未赋值的,未知的,不确定的值 空值不同于0或空格或空字符串 包含空值的算术运算后的结果也为空值 列别名 用来在当前查询中重命名列名 书写方式 列名 列别名 列名 AS 列别名 有三种情况需要在列名两侧加上引号 列别名中包含空格 列别名中区分大小写 列别名中包含特殊字符或关键字 NVL(列名,值):空值处理函数,当列名对应的值是空的时候，返回第二个参数，不为空，返回实际值 连接操作符 用于连接列与列、列与字符 形式上为|| SELECT ENAME,JOB,ENAME||&#39;的岗位是&#39;||JOB FROM EMP; 原义字符串 包含在select列表中的一个字符串，一个数字或一个日期 日期和字符串字面量必须使用单引号括起来&#39;&#39;(字面量:直接写到原程序中的固定值) 每个原义字符串会在每一行都出现 SELECT ENAME,JOB,ENAME||&#39;的岗位是&#39;||JOB,&#39;浑南&#39; 公司地址,2000 年终奖金，&#39;20-5月-2023&#39; 日期 FROM EMP; 消除重复行:DISTINCT SELECT DISTINCT JOB FROM EMP; 练习四 1.员工试用期6个月，转正后月薪上调20%，请查询出所有员工工作第一年的所有收入（需考虑奖金部分)， 要求显示格式为:XXX的第一年总收入为XXX。 SELECT ENAME||&#39;第一年总收入为&#39;||((SAL+NVL(COMM,0))*6+(SAL*1.2+NVL(COMM,0))*6) FROM EMP; 2.查询员工表中一共有哪几种岗位类型。 SELECT DISTINCT JOB 岗位类型 FROM EMP; WHERE子句的使用作用 使用WHERE子句限制返回的记录 写在FROM子句后面 语法SELECT 列名列表 FROM 表名 WHERE 条件 比较运算符 &#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、&lt;&gt;（不等于） 比较规则 字符串或日期类型要加上单引号 SELECT * FROM EMP WHERE ENAME = &#39;SMITH&#39;; SELECT * FROM EMP WHERE HIREDATE &gt; &#39;20-2月-1981&#39;; 字符串内容区分大小写 练习一: 1.查询职位为SALESMAN的员工编号、职位、入职日期。 SELECT EMPNO,JOB,HIREDATE FROM EMP WHERE JOB = &#39;SALESMAN&#39;; 2.查询1985年12月31日之前入职的员工姓名及入职日期。 SELECT ENAME,HIREDATE FROM EMP WHERE HIREDATE &lt; &#39;31-12月-1985&#39;; 3.查询部门编号不在10部门的员工姓名、部门编号。 SELECT ENAME,DEPTNO FROM EMP WHERE DEPTNO &lt;&gt; 10; 特殊比较运算符 between … and … 在XXX到XXX之间 SELECT * FROM EMP WHERE EMPNO BETWEEN 7800 AND 9999; IN(列表,列表) 或者 SELECT * FROM EMP WHERE DEPTNO IN(20,30); LIKE 模糊查询 /* 使用通配符代替未知的信息 通配符:%表示任意多个字符 _表示任意一个字符 使用ESCAPE进行转义 SELECT * FROM EMP WHERE ENAME LIKE &#39;%@_%&#39; ESCAPE &#39;@&#39;; */ SELECT * FROM EMP WHERE ENAME LIKE &#39;__O%&#39;; 练习2: 1.查询入职日期在82年至85年的员工姓名，入职日期。 SELECT ENAME,HIREDATE FROM EMP WHERE HIREDATE BETWEEN &#39;1-1月-1982&#39; AND &#39;31-12月-1985&#39;; 2.查询月薪在3000到5000的员工姓名，月薪。 SELECT ENAME,SAL FROM EMP WHERE SAL BETWEEN 3000 AND 5000; 3.查询部门编号为10或者20的员工姓名，部门编号。 SELECT ENAME,DEPTNO FROM EMP WHERE DEPTNO IN(10,20); 4.查询经理编号为7902，7566，7788的员工姓名，经理编号。 SELECT ENAME,MGR FROM EMP WHERE MGR IN(7902,7566,7788); IS NULL 判断空值 练习三: 1.查询员工姓名以W开头的员工姓名。 SELECT ENAME FROM EMP WHERE ENAME LIKE &#39;W%&#39;; 2.查询员工姓名倒数第2个字符为T的员工姓名。 SELECT ENAME FROM EMP WHERE ENAME LIKE &#39;%T_&#39;; 3.查询奖金为空的员工姓名，奖金。 SELECT ENAME,COMM FROM EMP WHERE COMM IS NULL; 逻辑运算符 AND(与):两个条件同时满足就为TRUE; OR(或):两个条件有一个满足就为TRUE; NOT(非):对指定条件取相反 练习四: 1.查询工资超过2000并且职位是MANAGER,或者职位是SALESMAN的员工姓名、职位、工资 SELECT ENAME,JOB,SAL FROM EMP WHERE SAL &gt; 2000 AND JOB = &#39;MANAGER&#39; OR JOB = &#39;SALESMAN&#39; ; 2.查询工资超过2000并且职位是 MANAGER或SALESMAN的员工姓名、职位、工资。 SELECT ENAME,JOB,SAL FROM EMP WHERE (JOB = &#39;MANAGER&#39; OR JOB = &#39;SALESMAN&#39;) AND SAL &gt; 2000 ; 3.查询部门在10或者20，并且工资在3000到5000之间的员工姓名、部门、工资。 SELECT ENAME,DEPTNO,SAL FROM EMP WHERE DEPTNO IN(10,20) AND SAL BETWEEN 3000 AND 5000; 4.查询入职日期在81年，并且职位不是SALES开头的员工姓名、入职日期、职位。 SELECT ENAME,HIREDATE,JOB FROM EMP WHERE HIREDATE BETWEEN &#39;1-1月-1981&#39; AND &#39;31-12月-1981&#39; AND JOB NOT LIKE &#39;SALES%&#39;; 5.查询职位为SALESMAN或MANAGER，部门编号为10或者20，姓名包含A的员工姓名、职位、部门编号。 SELECT ENAME,JOB,DEPTNO FROM EMP WHERE (JOB = &#39;MANAGER&#39; OR JOB = &#39;SALESMAN&#39;) AND DEPTNO IN(10,20) AND ENAME LIKE &#39;%A%&#39;; 排序 作用:用来排序 语法: ORDER BY{列名|表达式|别名|列号} ASC:默认值，升序 DESC:降序 注意:空值最大(MySQL则相反) 可多列排序，先按照前面的列排序，如果前面的列值相同，使用后面的列进行排序 特殊情况: ORDER BY子句可以出现SELECT子句中没有列出的列 子句的执行顺序:FROM WHERE SELECT ORDER 表连接 为什么需要表连接 需要查询的数据分布在多张表中 什么是表连接 连接是在多张表之间通过一定的条件，使得表之间发生关联，进而能从多张表中获取数据 连接的类型 按连接条件分:等值连接，不等值连接 按其他的连接方法分:外连接和内连接 多表连接的写法： Oracle风格或旧式连接 ANSI 99(标准语法) 笛卡尔积:第一张表的所有行和第二张表的所有行都发生连接 SELECT * FROM EMP,DEPT; 等值连接 用等号连接关联的列 SELECT * FROM EMP,DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO; SELECT EMP.*,DEPT.DNAME,DEPT.LOC FROM EMP,DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO; 表连接注意 未明确定义的列:两张表中都存在的名称相同的列，解决方法:在列名前加上表名作为前缀 通常在表连接的时候，会给表起别名，目的是书写方便，一旦起了别名，在当前查询中，不能再使用原来的表名，一律使用表别名替代 非等值连接:不使用等号对表进行连接 SELECT * FROM SALGRADE S,EMP E WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL; 内连接:只有匹配的记录才会显示到最终的结果集中 SELECT * FROM EMP,DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO; SELECT 列名 FROM 表1 INNER JOIN 表2 ON 表1.列名 = 表2.列名 -- 注意:INNER可以省略 外连接:两个表连接没有匹配的记录也会显示出来，+号写在where条件中需要添加空白行的一段 主表:该表中的所有数据至少出现一次 从表:只有匹配上的记录才显示(+号写在从表一端) SELECT ENAME,EMPNO,D.DEPTNO,D.DNAME,D.LOC FROM EMP E,DEPT D WHERE E.DEPTNO(+) = D.DEPTNO; -- 左外连接 SELECT 列名 FROM 表1 LEFT OUTER JOIN 表2 ON 表1.列名 = 表2.列名; -- OUTER可以省略 -- 或者 SELECT 列名 FROM 表1,表2 WHERE 表1.列名 = 表2.列名(+); Oracle风格，表连接特点 表连接的条件和行筛选条件都写到where子句中 多于两张表的连接 SELECT ENAME,LOC,GRADE FROM EMP E,DEPT D,SALGRADE S WHERE E.DEPTNO = D.DEPTNO AND E.SAL BETWEEN S.LOSAL AND S.HISAL; 先将两张表连接起来，再基于已经生成的连接结果(临时表)，再与第三张表连接 自连接 是一个表通过某种条件和自身进行连接的一种方式，就如同两个表连接一样 SELECT ENAME,LOC,GRADE FROM EMP E,DEPT D,SALGRADE S WHERE E.DEPTNO = D.DEPTNO AND E.SAL BETWEEN S.LOSAL AND S.HISAL; 分组函数 MAX函数:取最大值 MIN函数:取最小值 SUM函数:求和 AVG函数:求平均数 COUNT函数:查询总的记录数(空值不算):COUNT(*)指行数 DISTINCT函数:去重 GROUP BY子句 SELECT 列名 FROM 表名 WHERE 条件 GROUP BY 分组列 ORDER BY 列名; -- 多值的列和分组函数不能混用 -- GROUP BY A,B 没有先后之分，按AB相同分组 -- 分组的条件不能写在WHERE后面 -- 执行顺序:FROM WHERE GROUP SELECT ORDER -- 分组函数AVG是在GROUP期间完成的一个语句，WHERE执行分组函数时还未计算出结果 -- 解决方法如下的HAVING语句 -- 一旦分组，SELECT后只能写分组条件和分组函数(但MySQL与之不同) HAVING子句:负责分组条件的筛选 -- 标准书写顺序 SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... -- 标准执行顺序 FROM ... WHERE ... GROUP BY ... HAVING ... SELECT ... ORDER BY ... -- 注意:MYSQL中的执行顺序 FROM ... WHERE ... GROUP BY ... SELECT ... HAVING ... ORDER BY ... 子查询 括号中的查询称为子查询，外面的查询为父查询，子查询可以独立执行，先执行子查询得到确定的结果，父查询基于这些结果再执行 使用注意: 子查询用括号括起来 放在比较运算符的右边 大多数情况下，子查询不需要排序 子查询分类: 单行子查询:子查询中返回单行单列，使用的比较运算符:&gt;=、&lt;=、&gt;、&lt;、&lt;&gt;、= -- 查询比该部门平均薪水低的员工信息 SELECT * FROM EMP E JOIN (SELECT DEPTNO,AVG(SAL) AVGSAL FROM EMP GROUP BY DEPTNO ) A ON E.DEPTNO = A.DEPTNO WHERE E.SAL &lt; A.AVGSAL; 多行子查询:子查询中返回多行单列，使用的比较运算符:IN、ANY、ALL IN:和以前介绍的功能一致，判断是否与子查询的任意一个返回值相同。 -- 查询是经理的员工姓名，工资。 SELECT ENAME,SAL FROM EMP WHERE EMPNO IN( SELECT MGR FROM EMP ); ANY:表示和子查询的任意一行结果进行比较，有一个满足条件即可。 -- 查询是经理的员工姓名，工资。(ANY) SELECT ENAME,SAL FROM EMP WHERE EMPNO = ANY( SELECT MGR FROM EMP ); -- 查询部门编号不为10，且工资比10部门任意一名工资高的员工编号，姓名，职位，工资。 SELECT EMPNO,ENAME,JOB,SAL FROM EMP WHERE DEPTNO &lt;&gt; 10 AND SAL &gt; ANY( SELECT SAL FROM EMP WHERE DEPTNO = 10 ); ALL:表示和子查询的所有行结果进行比较，每一行必须都满足条件。 -- 查询部门编号不为10，且工资比10部门所有员工工资高的员工编号，姓名，职位，工资。 SELECT EMPNO,ENAME,JOB,SAL FROM EMP WHERE DEPTNO &lt;&gt; 10 AND SAL &gt; ALL( SELECT SAL FROM EMP WHERE DEPTNO = 10 ); 多列子查询:子查询中返回多行多列 -- 查询各个部门收入最低的人的姓名 SELECT ENAME FROM EMP WHERE (SAL,DEPTNO) IN (SELECT MIN(SAL),DEPTNO FROM EMP GROUP BY DEPTNO); -- 1.查询职位及经理和10部门任意一个员工职位及经理相同的员工姓名，职位，不包括10部门员工 SELECT ENAME,JOB FROM EMP WHERE(JOB,MGR) IN (SELECT JOB,MGR FROM EMP WHERE DEPTNO = 10) AND DEPTNO &lt;&gt; 10; -- 2.查询职位及经理和10部门任意一个员工职位或经理相同的员工姓名，职位，不包括10部门员工 SELECT ENAME,JOB FROM EMP WHERE (JOB IN (SELECT JOB FROM EMP WHERE DEPTNO = 10) OR MGR IN (SELECT MGR FROM EMP WHERE DEPTNO = 10)) AND DEPTNO &lt;&gt; 10; 注意:如果子查询中有空值，就不能使用NOT IN运算符 ROWNUM ROWNUM是一个伪列，伪列是使用上类似于表中的列而实际没有存储在表中的特殊对象 ROWNUM的功能是在每次查询时返回结果集的顺序数，这个顺序数是在记录输出时才一步一步产生的，第一行显示1，第二行显示2，以此类推 ROWNUM只能进行小于和小于等于的运算，不能执行大于或大于等于运算 TOP-N 是实现表中按照某个列排序输出最大或最小的N条记录 SELECT ROWNUM,A.ENAME FROM (SELECT ENAME FROM EMP ORDER BY SAL DESC) A WHERE ROWNUM &lt; 3; 分页 pagesize 每页的记录数(每页最多有多少行) pagenum 目标页数(第几页) -- 1.按照每页显示5条记录，分别查询工资最高的第1页，第2页，第3页信息，要求显示员工姓名、入职日期、部门名称、工资。 SELECT B.ENAME 姓名, B.HIREDATE 入职日期, DNAME 部门名称, B.SAL 工资 FROM (SELECT A.*, ROWNUM NM FROM (SELECT * FROM EMP ORDER BY SAL DESC) A WHERE ROWNUM &lt;= 5) B JOIN DEPT D ON B.DEPTNO = D.DEPTNO WHERE NM &gt;= 1; SELECT B.ENAME 姓名, B.HIREDATE 入职日期, DNAME 部门名称, B.SAL 工资 FROM (SELECT A.*, ROWNUM NM FROM (SELECT * FROM EMP ORDER BY SAL DESC) A WHERE ROWNUM &lt;= 10) B JOIN DEPT D ON B.DEPTNO = D.DEPTNO WHERE NM &gt;= 6; SELECT B.ENAME 姓名, B.HIREDATE 入职日期, DNAME 部门名称, B.SAL 工资 FROM (SELECT A.*, ROWNUM NM FROM (SELECT * FROM EMP ORDER BY SAL DESC) A WHERE ROWNUM &lt;= 15) B JOIN DEPT D ON B.DEPTNO = D.DEPTNO WHERE NM &gt;= 11; 相关子查询 当子查询中引用的父查询表中的一个列时,Oracle服务器执行相关子查询 执行过程: 取得父查询的候选行 用候选行被子查询引用列的值执行子查询 用来自子查询的值确认或取消候选行 重复上面三步直到父查询中没有剩余的候选行为止 相关子查询不可以独立执行 -- 查询工资高于部门平均薪水的员工信息 SELECT * FROM EMP E WHERE SAL &gt; (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = E.DEPTNO); EXISTS:判断是否存在,操作过程: 子查询如果有记录找到，子查询语句不会继续执行，返回值为true 子查询中如果到表的末尾也没找到，返回false -- 查询是经理的员工姓名 SELECT ENAME FROM EMP E WHERE EXISTS(SELECT (&#39;1&#39;) FROM EMP WHERE E.EMPNO = MGR ); NOT EXISTS:与上面相反，判断子查询是否没有返回值，如果没有返回值，表达式为true，如果找到一条返回值，则为false -- 查询不是经理的员工姓名 SELECT ENAME FROM EMP E WHERE NOT EXISTS(SELECT (&#39;1&#39;) FROM EMP WHERE E.EMPNO = MGR );","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yiyecreb.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yiyecreb.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"2023年两天一夜的大连旅游记录","slug":"0613大连旅游记录","date":"2023-06-13T14:48:42.889Z","updated":"2023-06-13T16:06:28.667Z","comments":true,"path":"2023/06/13/0613大连旅游记录/","link":"","permalink":"http://yiyecreb.top/2023/06/13/0613%E5%A4%A7%E8%BF%9E%E6%97%85%E6%B8%B8%E8%AE%B0%E5%BD%95/","excerpt":"","text":"2023年6月12日:老虎滩海洋主题公园浏览","categories":[{"name":"日常","slug":"日常","permalink":"http://yiyecreb.top/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"日常分享","slug":"日常分享","permalink":"http://yiyecreb.top/tags/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/"}]},{"title":"若依管理系统学习使用经验(佛系更新中)","slug":"若依管理系统开发学习经验","date":"2023-06-03T06:46:33.592Z","updated":"2023-06-03T07:43:57.742Z","comments":true,"path":"2023/06/03/若依管理系统开发学习经验/","link":"","permalink":"http://yiyecreb.top/2023/06/03/%E8%8B%A5%E4%BE%9D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%BB%8F%E9%AA%8C/","excerpt":"","text":"话说在前 本文章仅用来共享我个人使用时遇见的问题以及自己在使用中学会的一些使用方式 什么是若依:若依是一套全部开源的快速开发平台(可以参考人人开源)，便于实现各种管理系统的快速开发 环境配置 MySQL &gt;&#x3D; 5.7 JDK &gt;&#x3D; 1.8 Maven &gt;&#x3D; 3.0 Redis(我个人使用的是5.0.14.1) NodeJS 运行软件:IDEA(当然eclipse也是可以的) 若依官网:ruoyi.vip 若依Gitee源码仓库:RuoYi-Vue: 🎉 基于SpringBoot，Spring Security，JWT，Vue &amp; Element 的前后端分离权限管理系统，同时提供了 Vue3 的版本 (gitee.com) 运行将从gitee上下载好的若依项目使用IDEA或eclipse打开，等待maven根据pom文件下载框架依赖以及jar包 连接数据库:建立一个名为ry的数据库(当然,起别的名字也可以,但要注意在配置文件内改变默认的数据库名称),在数据库内运行文件内自带的两个sql文件 修改数据库连接:编辑resources目录下的application-druid.yml url为数据库地址,username为数据库账号,password为数据库密码 修改服务器配置编辑resources目录下的application.yml port为端口号 在运行软件内开始运行显示: (♥◠‿◠)ﾉﾞ 若依启动成功 ლ(´ڡ`ლ)ﾞ .-------. ____ __ | _ _ \\ \\ \\ / / | ( &#39; ) | \\ _. / &#39; |(_ o _) / _( )_ .&#39; | (_,_).&#39; __ ___(_ o _)&#39; | |\\ \\ | || |(_,_)&#39; | | \\ `&#39; /| `-&#39; / | | \\ / \\ / &#39;&#39;-&#39; `&#39;-&#39; `-..-&#39; 即为运行成功 无法启动的一些常见原因:1.Redis未启动或Redis本身设有密码(启动redis或者把密码配置好就行) 2.数据库未连接 前端运行找到ruoyi-ui文件夹,在ruoyi-ui内打开控制台,输入npm install下载依赖,再输入npm run dev运行前端VUE项目(PS:端口号在vue-config.js文件内修改) 运行成功后在浏览器内输入localhost:80(默认端口),即可进入登录页面 关于验证码的问题；如果登录界面没有验证码图片内容，说明后端端口没连接上或后端没运行,将后端代码运行或连接端口就可以解决(所以说没事别乱改默认端口,后面有苦给你吃哦) 更新内容至此，下次更新随缘","categories":[{"name":"学习经验","slug":"学习经验","permalink":"http://yiyecreb.top/categories/%E5%AD%A6%E4%B9%A0%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yiyecreb.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"五月二十八号的散步心得","slug":"0528","date":"2023-05-28T13:57:26.898Z","updated":"2023-06-03T02:06:50.054Z","comments":true,"path":"2023/05/28/0528/","link":"","permalink":"http://yiyecreb.top/2023/05/28/0528/","excerpt":"","text":"近些天因为大大小小的各种事情加生活琐碎还有夏天的闷热真的导致心情很难蚌，多少有点控制不了自己的情绪，和女朋友一起在学校里散步真的解决了很多问题，至少有了缓解的依靠，真的蛮幸运的(话说以后这博客不会大部分都是我的碎碎念和日常吧[划去])","categories":[{"name":"日常","slug":"日常","permalink":"http://yiyecreb.top/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"日常分享","slug":"日常分享","permalink":"http://yiyecreb.top/tags/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/"}]},{"title":"欢迎来到依夜的个人博客","slug":"我的第一个笔记","date":"2023-05-24T05:25:42.972Z","updated":"2023-05-27T15:12:30.164Z","comments":true,"path":"2023/05/24/我的第一个笔记/","link":"","permalink":"http://yiyecreb.top/2023/05/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%AC%94%E8%AE%B0/","excerpt":"","text":"欢迎来到依夜的博客 从2023年5月27日起本博客正式开始投入，我的博客一般会发一些我的学习笔记，生活趣事分享以及一些观影观番游戏体验感谢，也愿意与更多的网络朋友们建议友情链接交流技术和爱好","categories":[{"name":"日常","slug":"日常","permalink":"http://yiyecreb.top/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"日常分享","slug":"日常分享","permalink":"http://yiyecreb.top/tags/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/"}]}],"categories":[{"name":"数据库","slug":"数据库","permalink":"http://yiyecreb.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"日常","slug":"日常","permalink":"http://yiyecreb.top/categories/%E6%97%A5%E5%B8%B8/"},{"name":"学习经验","slug":"学习经验","permalink":"http://yiyecreb.top/categories/%E5%AD%A6%E4%B9%A0%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yiyecreb.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"日常分享","slug":"日常分享","permalink":"http://yiyecreb.top/tags/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/"}]}