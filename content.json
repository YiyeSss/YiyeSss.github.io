{"meta":{"title":"依夜の妙妙屋","subtitle":"Here is YiyeSss","description":"","author":"依夜","url":"http://yiyecreb.top","root":"/"},"pages":[{"title":"分类","date":"2023-05-24T08:17:10.000Z","updated":"2023-05-24T08:21:53.840Z","comments":true,"path":"categories/index.html","permalink":"http://yiyecreb.top/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2023-05-24T09:04:19.000Z","updated":"2023-05-27T11:09:56.617Z","comments":true,"path":"about/index.html","permalink":"http://yiyecreb.top/about/index.html","excerpt":"","text":"欢迎来到我的博客 My Friends , Welcome to my blog I hope you can have a happy day after reading this 语言 C Java H5,CSS3,JS VUE2 账号 网站 账号 昵称 Gitee YiyeSss 依夜 洛谷 YiyeSss YiyeSss"},{"title":"标签","date":"2023-05-24T08:19:20.000Z","updated":"2023-05-24T08:22:40.116Z","comments":true,"path":"tags/index.html","permalink":"http://yiyecreb.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Oracle(目前更新到DQL查询语言)","slug":"Oracle","date":"2023-05-27T01:56:01.335Z","updated":"2023-05-27T15:17:41.678Z","comments":true,"path":"2023/05/27/Oracle/","link":"","permalink":"http://yiyecreb.top/2023/05/27/Oracle/","excerpt":"","text":"Oracle数据库 存储在一起的数据集合 能为多个用户共享 尽可能小的数据冗余 与应用程序彼此独立 数据库管理系统(DBMS) 是一种管理数据库的软件 包括数据库的创建、使用、维护、配置 数据库命令都要通过数据库管理系统处理 关系型数据库 实体以及实体间的各种关系均用关系来表示 用户的角度来看关系就是一张由行和列组成的二维数据表 常见关系型数据库 Oracle 甲骨文 MySQL 甲骨文 SQL Server 微软 DB2 IBM Sybase sybase公司 Oracle数据库简介: 目前是世界上最流行的关系型数据库之一 支持各种操作系统(Windows、Linux、IOS) 数据库领域一直处于领先地位 特点: 可移植性好 使用方便，功能强 适合各种大中小型服务器和微机环境 样例表Dept(部门) deptno:部门编号 dname:部门名称 loc:部门地址 Emp(员工表) empno:员工编号 ename:员工姓名 job:工作岗位 mgr:经历编号 hiredate:入职日期 sal:薪水 comm:奖金 deptno:部门编号 SalGrade(薪水等级表) GRADE:等级编号 LOSAL:最低工资 HISAL:最高工资 结构化的查询语言(SQL) 是操作和检索关系型数据库的标准语言 二十世纪七十年代由IBM公司开发，目前应用于各种关系型数据库 分类: 数据查询语言(DQL):SELECT，从表中查询数据 数据操作语句(DML):INSERT,UPDATE,DELETE,用于添加修改删除数据 事务处理语言(TPL):COMMIT和ROLLBACK，用于提交和回滚事务 数据控制语言(DCL):GRANT和REVOKE,用于授权和收回授权 数据定义语言(DDL):CREATE,DROP,ALTER,用于定义销毁和修改数据库对象 基本SELECT语句 SELECT语句 SELECT子句(SELECT *:查询所有列) FROM子句(FROM DEPT:表示从哪张表查询数据) SQL的相关概念 关键字:SQL语言中的保留字符串 语句:一条完整的SQL语句(独立执行) 子句:部分SQL语句(不能独立执行) 书写规则: 不区分大小写 可以在一行书写也可以多行书写，建议多行书写 关键字不可以分开，缩写或跨行写 选择列 所有列:* SELECT * FROM EMP; 选择指定列:列名之间使用逗号分隔 SELECT ENAME,HIREDATE FROM EMP; 算术运算符 +,-,*,&#x2F;,() 例题: 1.员工转正后，月薪上调20%，请查询出所有员工转正后的月薪。2.员工试用期6个月，转正后月薪上调20%，请查询出所有员工工作第一年的年薪所得（不考虑奖金部分.年薪的试用期6个月的月薪+转正后6个月的月薪) SELECT Ename,SAL,SAL*6+SAL*1.2*6 AS 试用转正年薪,SAL*1.2 AS 转正月薪 FROM EMP; 空值 空值是一种无效的,未赋值的,未知的,不确定的值 空值不同于0或空格或空字符串 包含空值的算术运算后的结果也为空值 列别名 用来在当前查询中重命名列名 书写方式 列名 列别名 列名 AS 列别名 有三种情况需要在列名两侧加上引号 列别名中包含空格 列别名中区分大小写 列别名中包含特殊字符或关键字 NVL(列名,值):空值处理函数,当列名对应的值是空的时候，返回第二个参数，不为空，返回实际值 连接操作符 用于连接列与列、列与字符 形式上为|| SELECT ENAME,JOB,ENAME||'的岗位是'||JOB FROM EMP; 原义字符串 包含在select列表中的一个字符串，一个数字或一个日期 日期和字符串字面量必须使用单引号括起来&#39;&#39;(字面量:直接写到原程序中的固定值) 每个原义字符串会在每一行都出现 SELECT ENAME,JOB,ENAME||'的岗位是'||JOB,'浑南' 公司地址,2000 年终奖金，'20-5月-2023' 日期 FROM EMP; 消除重复行:DISTINCT SELECT DISTINCT JOB FROM EMP; 练习四 1.员工试用期6个月，转正后月薪上调20%，请查询出所有员工工作第一年的所有收入（需考虑奖金部分)， 要求显示格式为:XXX的第一年总收入为XXX。 SELECT ENAME||'第一年总收入为'||((SAL+NVL(COMM,0))*6+(SAL*1.2+NVL(COMM,0))*6) FROM EMP; 2.查询员工表中一共有哪几种岗位类型。 SELECT DISTINCT JOB 岗位类型 FROM EMP; WHERE子句的使用作用 使用WHERE子句限制返回的记录 写在FROM子句后面 语法SELECT 列名列表 FROM 表名 WHERE 条件 比较运算符 &#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、&lt;&gt;（不等于） 比较规则 字符串或日期类型要加上单引号 SELECT * FROM EMP WHERE ENAME = 'SMITH'; SELECT * FROM EMP WHERE HIREDATE > '20-2月-1981'; 字符串内容区分大小写 练习一: 1.查询职位为SALESMAN的员工编号、职位、入职日期。 SELECT EMPNO,JOB,HIREDATE FROM EMP WHERE JOB = 'SALESMAN'; 2.查询1985年12月31日之前入职的员工姓名及入职日期。 SELECT ENAME,HIREDATE FROM EMP WHERE HIREDATE &lt; '31-12月-1985'; 3.查询部门编号不在10部门的员工姓名、部门编号。 SELECT ENAME,DEPTNO FROM EMP WHERE DEPTNO &lt;> 10; 特殊比较运算符 between … and … 在XXX到XXX之间 SELECT * FROM EMP WHERE EMPNO BETWEEN 7800 AND 9999; IN(列表,列表) 或者 SELECT * FROM EMP WHERE DEPTNO IN(20,30); LIKE 模糊查询 &#x2F;* 使用通配符代替未知的信息 通配符:%表示任意多个字符 _表示任意一个字符 使用ESCAPE进行转义 SELECT * FROM EMP WHERE ENAME LIKE &#39;%@_%&#39; ESCAPE &#39;@&#39;; *&#x2F; SELECT * FROM EMP WHERE ENAME LIKE &#39;__O%&#39;; 练习2: 1.查询入职日期在82年至85年的员工姓名，入职日期。 SELECT ENAME,HIREDATE FROM EMP WHERE HIREDATE BETWEEN &#39;1-1月-1982&#39; AND &#39;31-12月-1985&#39;; 2.查询月薪在3000到5000的员工姓名，月薪。 SELECT ENAME,SAL FROM EMP WHERE SAL BETWEEN 3000 AND 5000; 3.查询部门编号为10或者20的员工姓名，部门编号。 SELECT ENAME,DEPTNO FROM EMP WHERE DEPTNO IN(10,20); 4.查询经理编号为7902，7566，7788的员工姓名，经理编号。 SELECT ENAME,MGR FROM EMP WHERE MGR IN(7902,7566,7788); IS NULL 判断空值 练习三: 1.查询员工姓名以W开头的员工姓名。 SELECT ENAME FROM EMP WHERE ENAME LIKE &#39;W%&#39;; 2.查询员工姓名倒数第2个字符为T的员工姓名。 SELECT ENAME FROM EMP WHERE ENAME LIKE &#39;%T_&#39;; 3.查询奖金为空的员工姓名，奖金。 SELECT ENAME,COMM FROM EMP WHERE COMM IS NULL; 逻辑运算符 AND(与):两个条件同时满足就为TRUE; OR(或):两个条件有一个满足就为TRUE; NOT(非):对指定条件取相反 练习四: 1.查询工资超过2000并且职位是MANAGER,或者职位是SALESMAN的员工姓名、职位、工资 SELECT ENAME,JOB,SAL FROM EMP WHERE SAL > 2000 AND JOB = 'MANAGER' OR JOB = 'SALESMAN' ; 2.查询工资超过2000并且职位是 MANAGER或SALESMAN的员工姓名、职位、工资。 SELECT ENAME,JOB,SAL FROM EMP WHERE (JOB = 'MANAGER' OR JOB = 'SALESMAN') AND SAL > 2000 ; 3.查询部门在10或者20，并且工资在3000到5000之间的员工姓名、部门、工资。 SELECT ENAME,DEPTNO,SAL FROM EMP WHERE DEPTNO IN(10,20) AND SAL BETWEEN 3000 AND 5000; 4.查询入职日期在81年，并且职位不是SALES开头的员工姓名、入职日期、职位。 SELECT ENAME,HIREDATE,JOB FROM EMP WHERE HIREDATE BETWEEN '1-1月-1981' AND '31-12月-1981' AND JOB NOT LIKE 'SALES%'; 5.查询职位为SALESMAN或MANAGER，部门编号为10或者20，姓名包含A的员工姓名、职位、部门编号。 SELECT ENAME,JOB,DEPTNO FROM EMP WHERE (JOB = 'MANAGER' OR JOB = 'SALESMAN') AND DEPTNO IN(10,20) AND ENAME LIKE '%A%'; 排序 作用:用来排序 语法: ORDER BY{列名|表达式|别名|列号} ASC:默认值，升序 DESC:降序 注意:空值最大(MySQL则相反) 可多列排序，先按照前面的列排序，如果前面的列值相同，使用后面的列进行排序 特殊情况: ORDER BY子句可以出现SELECT子句中没有列出的列 子句的执行顺序:FROM WHERE SELECT ORDER 表连接 为什么需要表连接 需要查询的数据分布在多张表中 什么是表连接 连接是在多张表之间通过一定的条件，使得表之间发生关联，进而能从多张表中获取数据 连接的类型 按连接条件分:等值连接，不等值连接 按其他的连接方法分:外连接和内连接 多表连接的写法： Oracle风格或旧式连接 ANSI 99(标准语法) 笛卡尔积:第一张表的所有行和第二张表的所有行都发生连接 SELECT * FROM EMP,DEPT; 等值连接 用等号连接关联的列 SELECT * FROM EMP,DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO; SELECT EMP.*,DEPT.DNAME,DEPT.LOC FROM EMP,DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO; 表连接注意 未明确定义的列:两张表中都存在的名称相同的列，解决方法:在列名前加上表名作为前缀 通常在表连接的时候，会给表起别名，目的是书写方便，一旦起了别名，在当前查询中，不能再使用原来的表名，一律使用表别名替代 非等值连接:不使用等号对表进行连接 SELECT * FROM SALGRADE S,EMP E WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL; 内连接:只有匹配的记录才会显示到最终的结果集中 SELECT * FROM EMP,DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO; 外连接:两个表连接没有匹配的记录也会显示出来，+号写在where条件中需要添加空白行的一段 主表:该表中的所有数据至少出现一次 从表:只有匹配上的记录才显示(+号写在从表一端) SELECT ENAME,EMPNO,D.DEPTNO,D.DNAME,D.LOC FROM EMP E,DEPT D WHERE E.DEPTNO(+) = D.DEPTNO; Oracle风格，表连接特点 表连接的条件和行筛选条件都写到where子句中 多于两张表的连接 SELECT ENAME,LOC,GRADE FROM EMP E,DEPT D,SALGRADE S WHERE E.DEPTNO &#x3D; D.DEPTNO AND E.SAL BETWEEN S.LOSAL AND S.HISAL; 先将两张表连接起来，再基于已经生成的连接结果(临时表)，再与第三张表连接 自连接 是一个表通过某种条件和自身进行连接的一种方式，就如同两个表连接一样 SELECT ENAME,LOC,GRADE FROM EMP E,DEPT D,SALGRADE S WHERE E.DEPTNO = D.DEPTNO AND E.SAL BETWEEN S.LOSAL AND S.HISAL; 复习 Dept(部门表) deptno dname loc Emp(员工表) Empno Ename job mgr hiredate sal comm deptno SalGrade(薪水等级表) Grade losal hisal 书写 不区分大小写 一行或多行书写，推荐多行书写 列别名 阅读方便 方式 列名 列别名 列名 AS 列别名 列别名可以使用双引号括起来 NVL(列名,列为空时替代的值) order by 排序 order by 空值最大 多列排序，后面的列在前面的列全相同的情况下起作用 排序作用在select后","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yiyecreb.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yiyecreb.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"MySQL(目前更新到DQL查询语言)","slug":"DQL语言","date":"2023-05-24T05:33:25.879Z","updated":"2023-05-27T15:08:41.295Z","comments":true,"path":"2023/05/24/DQL语言/","link":"","permalink":"http://yiyecreb.top/2023/05/24/DQL%E8%AF%AD%E8%A8%80/","excerpt":"","text":"数据库的概述 持久化:把数据保存到可掉电式储存设备中以供之后使用 **数据持久化意味着将内存中的数据保存到硬盘上加以固化 持久化的主要作用是将内存中的数据的数据储存在关系型数据库中 数据库的相关概念 DB:数据库(Database) 即存储数据的”仓库”，其本质是一个文件系统。它保存了一系列有组织的数据 DBMS:数据库管理系统(Database Management System) 是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制。用户通过数据库管理系统访问数据库中表内的数据。 SQL:结构化查询语言(Structured Query Language) 专门用来与数据库通信的语言 数据库的分类 关系型数据库管理系统（RDBMS) 如:MySQL,Oracle,SQL Server,MariaDB(MySQL在Linux系统下的平替) 优势:便于复杂查询,使得对于安全性能很高的数据访问要求得以实现 非关系型数据库管理系统 非关系型数据库的分类: key-value型(针对高性能并发读写场景)查找速度快，但无法使用条件过滤 文档型（针对海量数据访问场景) 列式数据库:可以大量降低系统I&#x2F;O,但功能相对有限 图形数据库 优势:阉割不常用的功能，提高性能 关系型数据库设计规则 关系型数据库的典型数据结构就是数据表，这些数据表的组成都是结构化的(Structured)。 将数据放到表中，表再放到库中。 一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。 表具有一些特性，这些特性定义了数据在表中如何存储，类似Java和Python中“类”的设计。 表、记录、字段 E-R(entity-relationship，实体-联系)模型中有三个主要概念是:实体集，属性，联系集 一个实体集(class)对应于数据库中的一个表(table)，一个实体(instance)则对应于数据库表中的一行(row)，也称为一条记录(record)。一个属性(attribute)对应于数据库表中的一列(column)，也称为一个字段(field) OBM思想体现: 数据库中的一个表&lt;---&gt;Java或Python中的一个类 表中的一条数据&lt;---&gt;类中的一个对象(或实体) 表中的一个列&lt;---&gt;类中的一个字段、属性 表与表之间的关系:一对一，一对多，多对多，自我引用 MySQL环境搭建1.MySQL的卸载 步骤1:停止MySQL服务“Ctrl + Alt + Delet”打开任务管理器 在”服务”列表找到”MySQL8.0服务”,如果是”正在运行”状态，右键单击服务选择停止MySQL8.0服务 步骤2:卸载MySQL方式1:通过控制面板卸载 方式2:通过电脑管家等第三方软件卸载 方式3:通过安装包提供的卸载功能卸载 步骤3:清理注册表(选做)如果前几步做了，安装还是失败那么可以清理注册表 在系统搜索框中运行regedit HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Eventlog\\Application\\MySQL服务目录删除 HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\MySQL服务目录删除 HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSete02\\Services\\Eventlog\\Application\\MySQL服务目录删除 HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet002\\Services\\MySQL服务目录删除 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSetlServices\\EventlogApplication\\MySQL服务目录删除 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\MySQL服务删除 注册表中的ControlSet001,ControlSet002,不一定是001和002,可能是005、006之类 步骤4:删除环境变量，重启电脑 2.MySQL的下载、安装、配置软件的下载1.下载地址 官网:https://mysql.com 2.打开官网，点击DOWNLOADS 然后点击MySQL Community(GPL) Downloads MySQL的启动与停止##停止MySQL net stop MySQL服务名 ##启动MySQL net start MySQL服务名 MySQL的登录与退出服务器登录:mysql -h localhost -p 3306 -u roop -p 本机简写:mysql -u root -p密码 最前面的mysql你可以理解成一个关键字或者理解成一个固定的命令，是固定写法，类似于java、jdk中的javac命令或java命令 -h表示host,即主机的ip地址 -P表示port，端口，mysql数据库的默认端口是3306，当然啦，你可以自己改端口号，我这里没改端口号(注意：这是大写的字母P) -u表示user用户名 -p表示password密码(注意：这是小写的字母p) 大写的P表示端口号，小写的p表示密码 退出:exit MySQL的常见命令和语法规范常见命令: 1.查看当前所有的数据库 show databases; 2.打开指令的库 use 库名; 3.查看当前库的所有表 show tables; 4.查看其他库的所有表 show tables from 库名 5.创建表 CREATE table 表名&#123; 列名 列类型, 列名 列类型, ... &#125;; 6.查看表结构 desc 表名 7.查看服务器的版本 方式一:登录到MySQL服务端 select version(); 方式二:没有登录到MySQL服务端 mysql --version或者mysql --V 语法规则: 1.不区分大小写。但建议关键字大写，表名、列名小写 2.每条命令最好用分号结尾 3.每条命令根据需要，可以进行缩进或换行 4.注释 单行注释：#注释文字 单行注释：– 注释文字 多行注释：&#x2F;* 注释文字 *&#x2F;e1k DQL语言数据查询语言基础查询语法: SELECT 查询列表 FROM 表名; 类似于:System.out.println(); 特点: 1.查询列表可以是：表中的字段、常量值、表达式、函数 2.查询的结果是一个虚拟的表格 1.查询表中的单个字段 SELECT last_name FROM employees; 2.查询表中的多个字段 SELECT last_name,job_id FROM employees; 3.查询表中的所有字段 第一种方式:双击(可视化工具) 第二种方式: SELECT * FROM employees; tips: ​ 查询前:USE 库名;#进入指定的数据库 ​ 当表名和关键字重复时，表名用着重号包裹，如name 4.查询常量值 SELECT 100; SELECT &#39;john&#39;; tips:字符型和日期型的常量值必须用单引号引起来，数值型不需要。 5.查询表达式 SELECT 100*98; SELECT 100&amp;98; 6.查询函数 SELECT VERSION(实参列表); 7.起别名 便于理解 如果要查询的字段有重名的情况，使用别名可以区分开 ##方式一:使用AS SELECT 100*98 AS 结果(别名) ##方式二:使用空格 SELECT last_name 姓,first_name 名 FROM employees; #案例:查询salary，显示结果为out put SELECT salary AS &#39;out put&#39; FROM employees; 8.去重 关键字:DISTINCT 去掉重复的数据 SELECT DISTINCT department_id FROM employees; 9.+号的作用 Java中的+ 运算符:两个操作数都为数值型 连接符:只要有一个操作数为字符串 MySQL中的+ 仅仅有一个功能:运算符 SELECT 100+90;#两个操作数都为数值型，则做加法运算 SELECT &#39;123&#39;+90;##其中一方为字符型，则试图将字符型数值转换成数值型，如果转换成功则继续做加法运算 SELECT &#39;john&#39;+90;#如果转换失败，则将字符型数值转换成0 SELECT null+10;#只要一方为null，则结果肯定为null 案例:查询员工名和姓连接成一个字段并显示姓名 SELECT CONCAT(&#39;A&#39;,&#39;B&#39;,&#39;C&#39;)AS 结果 ##CONCAT()函数用于将两个字符串连接为一个字符串 SELECT CONCAT(last_name,first_name) AS 姓名 FROM employees; 附加 IFNULL函数 MySQL的IFNULL函数是MySQL控制流函数之一，它接受两个参数，如果不是NULL，则返回第一个参数，如果是NULL，则返回第二个参数，两个参数可以是文字值或表达式 以下说明了IFNULL函数的语法: IFNULL(expression_1,expression_2); 如果expression_1不为NULL，则IFNULL函数返回expression_1否则返回expression_2的结果。 IFNULL函数根据使用的上下文返回字符串或数字 如果要返回基于TRUE或FALSE条件的值，而不是NULL，则应使用IF函数 ISNULL函数 返回一个布尔值，该值指示一个表达式是否不包含Null(数据)。 语法 所需的表达式参数包含一个或多个数值表达式，变量，字符串表达式 备注 如果表达式为 Null，则 ISNULL返回True;否则，ISNULL返回False。如果表达式由多个表达式 变量 ，则任何构成变量中的Null都会导致为整个表达式返回 True。 Null 值表示变体不包含任何有效数据。 Null 与 空 不同，它表示变量尚未初始化。 它也不与零长度字符串 (“) ，有时称为 null 字符串。 重要: 使用 ISNULL 函数确定表达式是否包含 Null 值。 在某些情况下，预期计算结果为True的表达式（例如 If Var &#x3D; Null 和 If Var &lt;&gt; Null）始终为 False。 这是因为包含NULL的任何表达式本身为Null，因此为False。 条件查询语法： SELECT 查询列表 FROM 表名 WHERE 筛选条件;#类似于IF语句 #执行语句顺序:2、3、1 分类: 1.按条件表达式 简单条件运算符:&gt;&lt;&#x3D;,!&#x3D;或&lt;&gt;(建议这个)&gt;&#x3D;&lt;&#x3D; 案例一:查询工资&gt;12000的员工信息 SELECT * FROM employees WHERE salary&gt;12000 案例二:查询部门编号不等于90号的员工名和部门编号 SELECT last_name,department_id FROM employees WHERE department_id&lt;&gt;90; 2.按逻辑表达式筛选 作用:用于连接条件表达式 逻辑运算符&amp;&amp;||! 建议使用MySQL里自带的and or not 案例一:查询工资在10000到20000之间的员工名、工资、以及奖金 SELECT last_name,salary,commission_pct FROM employees WHERE salary &gt;&#x3D; 10000 AND salary &lt;&#x3D; 20000; 案列二:查询部门编号不是在90到110之间，或者工资高于15000的员工信息 SELECT * FROM employees WHERE department_id &lt;&#x3D;90 OR department_id &gt;&#x3D; 110 OR salary &gt;&#x3D; 15000; 3.模糊查询 like 特点:一般和通配符搭配使用 %任意多个字符,包含0个字符 _ 任意单个字符 案例一:查询员工名中包含字符a的员工信息 SELECT * FROM employees WHERE last_name LIKE &#39;%a%&#39;; 案例二:查询员工名中第三个字符为e，第五个字符为a的员工名和工资 SELECT last_name,salary FROM employees WHERE last_name LIKE &#39;__e_a%&#39;; 案例三:查询员工名中第二个字符为_的员工名 ESCAPE转译 SELECT last_name FROM employees WHERE last_name LIKE &#39;_\\_%&#39;; #或者last_name LIKE &#39;_$_%&#39; ESCAPE &#39;$&#39;; between and 特点: 使用between and可以提高语句的简洁度 包含临界值 两个临界值不要调换顺序 案例一:查询员工编号在100到120之间的员工信息 SELECT * FROM employees WHERE manager_id BETWEEN 100 AND 120; in 含义:判断某字段的值是否属于in列表中的某一项 特点: 使用in提高语句简洁度 in列表的值必须一致或兼容 不支持通配符 案例一:查询员工的工种编号是IT_PROG&#x2F;AD_VP、AD_PRES中的一个员工名和工种编号 SELECT last_name,job_id FROM employees WHERE job_id IN(&#39;IT_PROG&#39;,&#39;AD_VP&#39;,&#39;AD_PRES&#39;); is null 特点: &#x3D;或&lt;&gt;不能用于判断null值 is null或者is not null可以判断null值 is不能判断数值(不能当&#x3D;来用) 案例一:查询没有奖金的员工名和奖金率 SELECT last_name,commission_pct FROM employees WHERE commission_pct IS NULL; 附加:安全等于&lt;&#x3D;&gt; 可以判断null值 SELECT last_name,commission_pct FROM employees WHERE commission_pct &lt;&#x3D;&gt; NULL; 也可以判断数值 SELECT * FROM employees WHERE salary &lt;&#x3D;&gt; 12000; tips: IS NULL: 仅仅可以判断NULL值，可读性比较高，建议使用 &lt;&#x3D;&gt;:及可以判断NULL值，又可以判断普通的数值，可读性较低 SELECT last_name, department_id, salary*12*(1+IFNULL(commission_pct,0)) AS 年薪 FROM employees; 排序查询语法: SELECT 查询列表 FROM 表 【WHERE 筛选条件】 ORDER BY 排序列表【ASC|DESC】 特点: 1.ASC:升序,DESC:降序,如果不写默认是升序 2.ORDER BY字句中可以支持单个字段、多个字段、表达式、函数、别名 3.ORDER BY字句一般是放再查询语句的最后面，limit字句除外 案例一:查询员工信息，要求工资从高到低排序 SELECT * FROM employeeS ORDER BY salary DESC; 案例二:查询部门编号&gt;&#x3D;90的员工信息，按入职信息先后进行排序【添加筛选条件】 SELECT * FROM employees WHERE department_id &gt;&#x3D; 90 ORDER BY hiredate ASC; 案例三:按年薪的高低显示员工的信息和年薪【按表达式排序】 SELECT *,salary*12*(1+IFNULL(commission_pct,0)) AS 年薪 FROM employees ORDER BY salary*12*(1+IFNULL(commission_pct,0)) DESC; 案例四:按年薪的高低显示员工的信息和年薪【按别名排序】 SELECT *,salary*12*(1+IFNULL(commission_pct,0)) AS 年薪 FROM employees ORDER BY 年薪 DESC; 案例五:按姓名的长度显示员工的姓名和工资【按函数排序】 SELECT LENGTH(last_name), #字节长度 last_name, salary FROM employees ORDER BY LENGTH(last_name) DESC; 案例六:查询员工信息,要求先按工资升序排序，再按员工编号降序排序【按多个字段排序】 SELECT * FROM employees ORDER BY salary ASC,employee_id DESC; 常见函数概念 类似于Java的语法，将一组逻辑语句封装在方法体中，对外暴露方法名。 好处 隐藏了实现细节 提高代码的重用性 调用 SELECT 函数名(实参列表)【from表】; 特点 叫什么(函数名) 干什么(函数功能) 分类 单行函数 如CONCAT、LENGTH、IFNULL等 分组函数 做统计使用，又称统计函数、聚合函数、组函数 单行函数 1.字符函数 LENGTH 获取参数值的字节个数 SELECT LENGTH(&#39;john&#39;); SELECT LENGTH(&#39;数据库MySQL&#39;); SHOW VARIABLES LIKE &#39;%char%&#39;;#查询当前系统的字符集设置 CONCAT 拼接字符串 SELECT CONCAT(last_name,&#39;_&#39;,first_name)姓名 FROM employees UPPER(大写)、lower(小写) SELECT UPPER(&#39;joh&#39;); SELECT LOWER(&#39;john&#39;); SELECT LOWER(&#39;JOHN&#39;); 案例一:将姓变大写，名变小写，然后拼接 SELECT CONCAT( UPPER(last_name),&#39;_&#39;,LOWER(first_name) )AS 姓名 FROM employees; SUBSTR、SUBSRING 截取字符串 注意:索引从1开始 #截取从指定索引出后面所有的字符 SELECT SUBSTR(&#39;罗密欧与朱丽叶&#39;,5) out_put;#朱丽叶 #截取从指定索引处指定字符长度的字符 SELECT SUBSTR(&#39;罗密欧与朱丽叶,1,3(截几位)&#39;) out_put;#罗密欧 案例一：姓名中首字符大写，其他字符小写，然后用_拼接显示出来 SELECT CONCAT( UPPER(SUBSTR(last_name,1,1)), &#39;_&#39;, LOWER(SUBSTR(last_name,2)) )AS 姓名 FROM employees; INSTR 返回字符串中子字符串第一次出现的位置。如果在str中找不到子字符串，则INSTR()函数返回零。 SELECT INSTR(&#39;罗密欧与朱丽叶&#39;,&#39;朱&#39;);#5 TRIM 除掉一个字串中的字头或字尾 SELECT LENGTH(TRIM(&#39;张翠山&#39;)) AS out_put；#张翠山 SELECT TRIM(&#39;a&#39; FROM &#39;aaaaaa张aaaaa翠山aaaaaaaa&#39;) AS out_put;#张aaaaa翠山 LPAD 用指定的字符实现左填充指定长度 SELECT LPAD(&#39;拉姆达&#39;,10,&#39;*&#39;) AS out_put;#*******拉姆达 SELECT LPAD(&#39;拉姆达&#39;,2,&#39;*&#39;) AS out_put#拉姆 从右面截断 RPAD 用指定的字符实现右填充指定长度 SELECT RPAD(&#39;拉姆达&#39;,10,&#39;ab&#39;) AS out_put; #out_put #拉姆达abababa REPLACE 替换 SELECT REPLACE(&#39;JAVA与MySQL&#39;,&#39;MySQL&#39;,&#39;JS&#39;) AS out_put; #JAVA与JS SELECT REPLACE(&#39;MySQL与JAVA与MySQL&#39;,&#39;MySQL&#39;,&#39;JS&#39;) AS out_put; #JS与JAVA与JS 全部替换 数学函数 ROUND 四舍五入 SELECT ROUND(1.65);#2 SELECT ROUND(-1.65);#-2 SELECT ROUND(1.567,2);#1.57 CEIL 向上取整,返回&gt;&#x3D;该参数的最小整数 SELECT CEIL(1.001);#2 SELECT CEIL(-1.001);#-1 FLOOR 向下取整，返回&lt;&#x3D;该参数的最大整数 SELECT FLOOR(9.99);#9 SELECT FLOOR(-9.99);#-10 TRUNCATE 截断 SELECT TRUNCATE(1.65,1);#1.6 MOD 取余 SELECT MOD(10,3);#1 SELECT MOD(-10,-3);#-1 #被除数为正结果为正，若为负，结果为负 #相当于 SELECT 10%3; MOD(A,B): A-A&#x2F;B*B; 日期函数 NOW 返回当前系统日期+时间 SELECT NOW(); #2023-04-15 22:56:09 CURDATE 返回当前系统日期，不包含时间 SELECT CURDATA(); #2023-04-15 CURTIME 返回当前时间，不包含日期 SELECT CURTIME(); #22:59:05 可以获得指定部分,年,月,日,小时,分钟,秒 SELECT YEAR(NOW()) AS 年; SELECT YEAR(hiredata) 年 FROM employees; SELECT MONTH(NOW()) AS 月; #返回数字 SELECT MONTHNAME(NOW()) AS 月; #返回英文 STR_TO_DATE 将日期格式的字符转换成指定格式的日期 SELECT STR_TO_DATE(&#39;13-9-1999&#39;,&#39;%d-%m-%Y&#39;); #%Y是四位年份 %y指两位年份 DATE_FORMAT 将日期转换成字符 SELECT DATE_FORMAT(&#39;2018&#x2F;6&#x2F;6&#39;,&#39;%Y年%m月%d日&#39;); #2018年06月06日 案例一:查询有奖金的员工名和入职日期(xx月&#x2F;xx日 xx年) SELECT last_name, DATE_FORMAT(hiredate,&#39;%m月&#x2F;%d日 %Y年&#39;) FROM employees WHERE commission_pct IS NOT NULL ; 其他函数 VERSION 版本号 SELECT VERSION(); DATABASE 查看当前数据库 SELECT DATABASE(); USER 查询当前用户 SELECT USER(); 流程控制函数 IF函数 if else的效果 SELECT IF(&#39;10&gt;5&#39;,&#39;大&#39;,&#39;小&#39;);#大 CASE函数 使用一:类似于Switch case语句的效果 语法: CASE 要判断的字段或表达式 WHEN 常量1 THEN 要显示的值1或语句1 WHEN 常量2 THEN 要显示的值2或语句2 ... ELSE 要现实的值n或语句n END; 案例一:查询员工的工资,要求 部门号&#x3D;30,显示的工资为1.1倍 部门号&#x3D;40,显示的工资为1.2倍 部门号&#x3D;50,显示的工资为1.3倍 其他部门，显示的工资为原工资 SELECT salary 原始工资,department_id, CASE department_id WHEN 30 THEN salary*1.1 WHEN 40 THEN salary*1.2 WHEN 50 THEN salary*1.3 ELSE salary END AS 工资 FROM employees; 使用二:类似多重IF 语法: CASE WHEN 条件一 THEN 要显示值1或语句1 WHEN 条件一 THEN 要显示值2或语句2 ... ELSE 要显示的值n或语句n END; 案例一：查询员工的工资的情况 如果工资&gt;20000，显示A级别 如果工资&gt;15000，显示B级别 如果工资&gt;10000，显示C级别 否则显示D级别 SELECT salary, CASE WHEN salary&gt;20000 THEN &#39;A&#39; WHEN salary&gt;15000 THEN &#39;B&#39; WHEN salary&gt;10000 THEN &#39;C&#39; ELSE &#39;D&#39; END AS 工资级别 FROM employees; 分组函数功能:用作统计使用，又称为聚合函数、统计函数、组函数 分类：SUM求和、AVG平均值、MAX最大值、MIN最小值、COUNT计算个数 1.简单实用 #sum SELECT SUM(salary) FROM employees; #avg SELECT AVG(salary) FROM employees; #max SELECT MAX(salary) FROM employees; #min SELECT MIN(salary) FROM employees; #count SELECT COUNT(salary) FROM employees; #全部放一起使用 SELECT SUM(salary) 和,AVG(salary) 平均值,MAX(salary) 最大值,MIN(salary) 最小值,COUNT(salary) 个数 FROM employees; 特点: 2.参数支持哪些类型 SUM、AVG一般用于处理数值型 MAX、MIN、COUNT可以处理任何类型 以上分组函数都忽略NULL值 3.可以和DISTINCT搭配实现去重运算 SELECT SUM(DISTINCT salary),COUNT(salary) FROM employees; SELECT COUNT(DISTINCT salary),COUNT(salary) FROM employees; 4.COUNT函数单独介绍 一般用COUNT(*)统计行数 SELECT COUNT(salary) FROM employees; #统计行数 SELECT COUNT(*) FROM employees; #插入一列1，查看行数 SELECT COUNT(1) FROM employees; 效率: MYISAM存储引擎下，COUNT(*)的效率高 INNODB存储引擎下，COUNT(*)和COUNT(*)的效率差不多，比COUNT(字段)要高一些。 5.和分组函数一同查询的字段有限制 SELECT AVG(salary),employee_id FROM employees; AVG()查询完是一个表格，而employee_id是107个 但是只能显示出两者中一个。 和分组函数一同查询的字段要求是group by后的字段 7.DATEDIFF函数 计算日期差 SELECT DATEDIFF(&#39;2017-10-1&#39;,&#39;2017-9-29&#39;); #2 分组查询语法: SELECT 分组函数,列(要求出现在group by的后面) FROM 表 【WHERE 筛选条件】 GROUP BY 分组的列表 【ORDER BY 字句】 tips:查询列表比较特殊，要求是分组函数和group by后面出现的字段 group by：按照某个字段或者某些字段进行分组 having：对分组之后的数据进行再次的过滤。 分组函数都会和group一起使用。分组函数都会在group by结束之后再执行的。没有group by整张表就自成一组。 where后面不能用分组函数。 特点: 1.分组查询中的筛选条件分两类 数据源 位置 关键字 分组前筛选 原始表 group by字句的前面 WHERE 分组后筛选 分组后的结果集 group by字句的后面 HAVING 分组函数做条件肯定是放在having字句中 能用分组前筛选的尽量用分组前筛选 2.group by字句支持单个字段分组，多个字段分组(多个字段之间用逗号隔开没有顺序要求)，表达式或函数(用的较少) 3.也可以添加排序(排序放在整个分组查询的最后) 1.添加分组前的筛选 简单的分组查询 案例一:查询每个工种的最高工资 SELECT MAX(salary) FROM employees GROUP BY job_id; 案例二：查询每个位置上的部门个数 SELECT COUNT(department_id) FROM employees GROUP BY location_id; 添加筛选条件： 案例一：查询邮箱中包含a字符的，每个部门的平均工资 SELECT AVG(salary),department_id FROM employees WHERE emile LIKE &#39;%a%&#39; GROUP BY department_id; 案例二：查询有奖金的每个领导手下员工的最高工资 SELECT MAX(salary),manager_id FROM employees WHERE commission_pct is not null GROUP BY manager_id; 2.添加分组后筛选 添加复杂的筛选条件 案例一：查询哪个部门的员工个数&gt;2 SELECT COUNT(*) AS 员工个数,department_id FROM employees GROUP BY department_id HAVING COUNT(*)&gt;2; 注意是先找出每个部门的员工个数，再筛选出大于5的。所以是分组后筛选，要用HAVING（而不是WHERE），放在GROUP BY 的后面 案例二：查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资 SELECT MAX(salary) AS 最高工资,job_id FROM employees WHERE commission_pct is not null GROUP BY job_id HAVING MAX(salary)&gt;12000; 案例三：查询领导编号&gt;102的，最低工资&gt;5000的领导的编号是哪个，及其最低工资 SELECT MIN(salary),manager_id FROM employees WHERE manager_id &gt; 102 GROUP manager_id HAVING MIN(salary) &gt; 5000 3.按表达式或函数分组 案例一：按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数&gt;5的有哪些 SELECT LENGTH(last_name),COUNT(*) FROM employees GROUP BY LENGTH(last_name) HAVING COUNT(*)&gt;5; 5.添加排序 案例一：查询每个部门每个工种的员工的平均工资，并且按平均工资的高低显示 SELECT AVG(salary),department_id,job_id FROM employees GROUP BY department_id,job_id ORDER BY AVG(salary) DESC; 连接查询含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询 笛卡尔乘积现象：表1 有m行 ，表2 有n行 ，结果&#x3D;m*n行 发生原因：没有有效的连接条件 如何避免：添加有效的连接条件 分类： 1.按年代分类 sql92标准：仅仅支持内连接 sql99标准【推荐】：支持内连接+外连接(左外和右外)+交叉连接 2.按功能分类 内连接：等值连接、非等值连接、自连接 外连接：左外连接、右外连接、全外连接 交叉连接 一.sql92标准 1.等值连接 多表等值连接的结果为多表的交集部分 n表连接，至少需要n-1个连接条件 多表的顺序没有要求 一般需要为表起别名 可以搭配前面介绍的所有字句使用，比如排序、分组、筛选 案例一：查询男女对应的名字 SELECT NAME,boyname FROM boys,beauty WHERE beauty.boyfriend_id &#x3D; boys.id; 案例二:查询员工名和对应的部门名 SELECT last_name,department_name FROM departments,employees WHERE departments.department_id &#x3D; employees.department_id; 为表起别名： 案例一：查询员工名、工种号、工种名 提高语句的简洁度 区分多个重名的字段 SELECT CONCAT(last_name,first_name),e.job_id,job_name FROM employees e,jobs j WHERE e.job_id &#x3D; j.job_id; tips：如果为表起了别名，则查询的字段就不能使用原来的表名去限定 两个表的顺序是可以调换的 加筛选： 案例一：查询有奖金的员工名、部门名 SELECT CONCAT(last_name,first_name),department_name,commission_pct FROM employees e,departments d WHERE e.department_id &#x3D; d.department_id AND e.commission_pct IS NOT NULL; 案例二:查询城市名中第二个字符为o的部门名和城市名 SELECT department_name,city FROM departments d,locations l WHERE d.location_id &#x3D; l.location_id AND city LIKE &#39;_o%&#39;; 加分组： 案例一：查询每个城市的部门个数 SELECT COUNT(*),city FROM departments d,locations l WHERE d.location_id &#x3D; l.location_id GROUP BY city; 案例二：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资 SELECT MIN(salary),manager_id,department_name FROM departments d,employees e WHERE d.department_id &#x3D; e.department_id AND commission_pct is not null GROUP BY department_name,d.manager_id; 加排序： 案例一：查询每个工种的工种名和员工的个数，并且按员工个数降序 SELECT job_name 工种名,COUNT(*) 员工个数 FROM employees e,jobs j WHERE e.job_id &#x3D; j.job_id GROUP BY job_name ORDER BY COUNT(*) DESC; 三表连接： 案例一：查询员工名、部门名和所在的城市 SELECT CONCAT(last_name,first_name) 员工名, department_name 部门名, city 城市 FROM employees e,departments d,locations l WHERE e.department_id &#x3D; d.department_id AND e.location_id &#x3D; l.location_id; 2.非等值连接 语法 SELECT 查询列表 FROM 表1 别名,表2 别名 WHERE 非等值的连接条件 【and 筛选条件】 【GROUP BY 分组字段】 【HAVING 分组后的筛选】 【ORDER BY 排序字段】 案例一：查询员工的工资和工资级别 SELECT salary,grade_level FROM employees e,job_grades g WHERE salary BETWEEN g.lowest_sal AND g.highest_sal; 3.自连接 案例一：查询员工名和上级的名称 SELECT e.employee_id,e.last_name,m.lat_name,m.employee_id FROM employees e ,employees m WHERE e.manager_id &#x3D; m.employee_id; 二.sql99标准 语法： SELECT 查询列表 FROM 表1 别名 【连接类型】 JOIN 表2 别名 ON 连接条件 【WHERE 筛选条件】 【GROUP BY 分组】 【HAVING 筛选条件】 【ORDER BY 排序列表】 1.内连接 连接类型：inner SELECT 查询列表 FROM 表1 别名 INNER JOIN 表2 别名 ON 连接条件; 分类： 1.等值连接 特点： 可以添加排序、分组、筛选 inner可以省略 筛选条件放在where的后面，连接条件放在on后面，提高分离性，便于阅读 inner join 连接和sql192语法中的等值连接效果是一样的，都是查询多表的交集","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yiyecreb.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yiyecreb.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"欢迎来到依夜的个人博客","slug":"我的第一个笔记","date":"2023-05-24T05:25:42.972Z","updated":"2023-05-27T15:12:30.164Z","comments":true,"path":"2023/05/24/我的第一个笔记/","link":"","permalink":"http://yiyecreb.top/2023/05/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%AC%94%E8%AE%B0/","excerpt":"","text":"欢迎来到依夜的博客 从2023年5月27日起本博客正式开始投入，我的博客一般会发一些我的学习笔记，生活趣事分享以及一些观影观番游戏体验感谢，也愿意与更多的网络朋友们建议友情链接交流技术和爱好","categories":[{"name":"日常","slug":"日常","permalink":"http://yiyecreb.top/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"日常分享","slug":"日常分享","permalink":"http://yiyecreb.top/tags/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/"}]}],"categories":[{"name":"数据库","slug":"数据库","permalink":"http://yiyecreb.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"日常","slug":"日常","permalink":"http://yiyecreb.top/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yiyecreb.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"日常分享","slug":"日常分享","permalink":"http://yiyecreb.top/tags/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/"}]}